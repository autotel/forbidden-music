import factorySampleKits from "@/_autogenerated_samples";
import { SampleFileDefinition } from "@/synth/features/chromaticSampleKitUser";
import { defineStore } from "pinia";
import { computed, ref } from "vue";

// { library [ kits [ samples ] ]  }

export type SampleType = 'chromatic' | 'atonal' | 'impulse-response';
/**
 * A list of samples to distribute accross
 * frequencies, with some metadata
 */
export interface SampleKitDefinition {
    type: SampleType;
    name: string,
    exclusive?: boolean;
    onlyLocal?: boolean;
    readme?: string;
    samples: SampleFileDefinition[];
    fromLibrary: string;
}

const requireAttributes = (obj: Object, attributes: string[], guideStr: string) => {
    for (const attr of attributes) {
        if (!obj.hasOwnProperty(attr)) {
            throw new Error(`Object must have attribute ${attr} in ${guideStr}`);
        }
    }
}

export type ExternalSampleKit = {
    url: string;
    name: string;
    error: string;
    content: SampleKitDefinition[];
}

export default defineStore('externalSampleLibrariesStore', () => {
    const listOfExternalLibs = ref([{
        url: 'localhost',
        name: 'factory',
        error: '',
        content: factorySampleKits
    }] as ExternalSampleKit[]);

    const listOfAvailableSampleKits = computed(() => {
        return [...listOfExternalLibs.value.flatMap(lib => lib.content)];
    });

    const checkLibraryDef = (def: Object): SampleKitDefinition => {
        if (def === null) {
            throw new Error('Library definition is null');
        }

        // @ts-ignore
        requireAttributes(def, ['name', 'samples', 'fromLibrary', 'type'], 'Library definition');

        if (typeof def !== 'object') {
            throw new Error('Library definition must be an object');
        }
        // @ts-ignore
        if (!Array.isArray(def['samples'])) {
            throw new Error('Library definition samples property must be an array');
        }
        // @ts-ignore
        if (def.samples.some((s: unknown) => typeof s !== 'object')) {
            throw new Error('Library definition samples property must be an array of objects');
        }

        // @ts-ignore
        def.samples.forEach((s: unknown) => {
            if (s === null) {
                // @ts-ignore
                throw new Error('Sample definition is null in ' + def.name);
            }
            if (typeof s !== 'object') {
                throw new Error('Sample definition must be an object');
            }
            // @ts-ignore
            requireAttributes(s, ['path', 'name'], def.name);

            // @ts-ignore
            if (def.type === 'chromatic') {
                // @ts-ignore
                requireAttributes(s, ['frequency', 'frequencyStart', 'frequencyEnd', 'velocityStart', 'velocityEnd'], def.name);
            }

            if ('frequencyEnd' in s && s.frequencyEnd === null) s.frequencyEnd = Infinity;
            if ('velocityEnd' in s && s.velocityEnd === null) s.velocityEnd = Infinity;
        })
        return def as SampleKitDefinition;
    }

    const addLibraryUrl = async (definitionUrl: string) => {
        console.log("add library", definitionUrl);
        let error = '';
        let checkedList: SampleKitDefinition[] = [];
        try {
            const newDef = await fetch(definitionUrl).then(res => res.json());
            if (!Array.isArray(newDef)) {
                error = 'Library definition must be an array, instead got ' + typeof newDef;
            }
            for (const def of newDef) {
                checkedList.push(checkLibraryDef(def));
            }
        } catch (e) {
            error = e + '';
        }
        const libName = definitionUrl.replace(/((http)|(:\d+)|:|\/)+/gi, ' ');
        listOfExternalLibs.value.push({
            url: definitionUrl,
            name: libName,
            content: checkedList,
            error,
        });
    }

    const removeLibraryUrl = (definitionUrl: string) => {
        listOfExternalLibs.value = listOfExternalLibs.value.filter(({ url }) => url !== definitionUrl);
    }

    addLibraryUrl('http://127.0.0.1:3010/samples');

    return {
        listOfExternalLibs,
        listOfAvailableSampleKits,
        addLibraryUrl, removeLibraryUrl
    }
});