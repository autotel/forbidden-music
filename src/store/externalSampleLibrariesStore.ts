import { defineStore } from "pinia";
import nsLocalStorage from "../functions/nsLocalStorage";
import { SampleFileDefinition } from "@/synth/generators/Sampler";
import { ref } from "vue";
import factorySampleKits from "@/_autogenerated_samples";

/**
 * A list of samples to distribute accross
 * frequencies, with some metadata
 */
export interface SampleKitDefinition {
    type?: 'oneshot' | 'granular';
    name: string,
    exclusive?: boolean;
    onlyLocal?: boolean;
    readme?: string;
    samples: SampleFileDefinition[];
}

const requireAttributes = (obj: Object, attributes: string[], guideStr: string) => {
    for (const attr of attributes) {
        if (!obj.hasOwnProperty(attr)) {
            throw new Error(`Object must have attribute ${attr} in ${guideStr}`);
        }
    }
}

export default defineStore('externalSampleLibrariesStore', () => {
    const listOfExternalLibs = ref([] as string[]);
    const listOfAvailableSampleKits = ref([
        ...factorySampleKits,
    ] as SampleKitDefinition[]);
    const checkLibraryDef = (def: unknown): SampleKitDefinition => {
        if (def === null) {
            throw new Error('Library definition is null');
        }
        if (typeof def !== 'object') {
            throw new Error('Library definition must be an object');
        }
        if (!def.hasOwnProperty('name')) {
            throw new Error('Library definition must have a name property');
        }
        if (!def.hasOwnProperty('samples')) {
            throw new Error('Library definition must have a samples property');
        }
        // @ts-ignore
        if (!Array.isArray(def['samples'])) {
            throw new Error('Library definition samples property must be an array');
        }
        // @ts-ignore
        if (def.samples.some((s: unknown) => typeof s !== 'object')) {
            throw new Error('Library definition samples property must be an array of objects');
        }
        // @ts-ignore
        def.samples.forEach((s: unknown) => {
            if (s === null) {
                // @ts-ignore
                throw new Error('Sample definition is null in ' + def.name);
            }
            if (typeof s !== 'object') {
                throw new Error('Sample definition must be an object');
            }
            // @ts-ignore
            requireAttributes(s, ['frequency', 'path'], def.name);
        })
        return def as SampleKitDefinition;
    }
    const addLibraryUrl = async (definitionUrl: string) => {
        try {
            console.log("add library", definitionUrl);
            const newDef = await fetch(definitionUrl).then(res => res.json());
            console.log("newDef", newDef);
            if (!Array.isArray(newDef)) {
                throw new Error('Library definition must be an array, instead got ' + typeof newDef);
            }
            const checkedList = [];
            for (const def of newDef) {
                checkedList.push(checkLibraryDef(def));
            }
            listOfExternalLibs.value.push(definitionUrl);
            listOfAvailableSampleKits.value = [...listOfAvailableSampleKits.value, ...checkedList];
        } catch (e) {
            console.error("Error changing sample lib", e);
        }
    }

    addLibraryUrl('http://127.0.0.1:3010/generate-samples');
    return {
        listOfExternalLibs,
        listOfAvailableSampleKits,
        addLibraryUrl,
    }
});