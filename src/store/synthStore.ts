
import { defineStore } from 'pinia';
import { ref } from 'vue';
import impulseResponseSampleDefinitions from "../_autogenerated_impulse_responses";
import sampleDefinitions from "../_autogenerated_samples";
import { SynthChain } from '../dataStructures/SynthChain';
import { SynthStack } from '../dataStructures/SynthStack';
import { AutomationPoint } from '../dataTypes/AutomationPoint';
import { Note, getFrequency } from "../dataTypes/Note";
import isDev from '../functions/isDev';
import isTauri, { tauriObject } from '../functions/isTauri';
import { AutoMaximizerEffect } from '../synth/AutoMaximizerEffect';
import { ConvolutionReverbEffect } from '../synth/ConvolutionReverbEffect';
import { ExternalMidiSynth } from '../synth/ExternalMidiSynth';
import { FmSynth } from '../synth/FmSynth';
import { FourierSynth, FourierVoice } from '../synth/FourierSynth';
import { GranularSampler } from '../synth/GranularSampler';
import { KarplusSynth } from '../synth/KarplusSynth';
import { KickSynth } from '../synth/KickSynth';
import { PlaceholderSynth } from '../synth/PlaceholderSynth';
import { RingModEffect } from '../synth/RingModEffect';
import { Sampler } from '../synth/Sampler';
import { SineCluster } from '../synth/SineCluster';
import { SineSynth } from '../synth/SineSynth';
import { AudioModule, ReceivesNotes } from '../synth/interfaces/AudioModule';
import { SynthParam, SynthParamStored } from '../synth/interfaces/SynthParam';
import { ThingyScoreFx } from '../synth/scoreEffects/Thingy';
import { PatcheableSynthVoice, Synth } from '../synth/super/Synth';
import { useAudioContextStore } from "./audioContextStore";
import { useExclusiveContentsStore } from './exclusiveContentsStore';
import { useLayerStore } from "./layerStore";
import { useMasterEffectsStore } from "./masterEffectsStore";
import { abbreviate } from '../functions/abbreviate';
import { PatcheableTrait, PatcheableType } from '../dataTypes/PatcheableTrait';
import { PatcheableSynth } from '../synth/PatcheableSynth';

type AdmissibleSynthType = AudioModule | Synth | PatcheableSynthVoice;

/** storage for export/save, etc definitions */
type AudioModuleDefinition = {
    type: string;
    params: Array<SynthParamStored>;
}
type SynthChainDefinition = SynthChainStepDefinition[];
type SynthStackDefinition = SynthChainDefinition[];
export type SynthChainStepDefinition = AudioModuleDefinition | SynthStackDefinition;

export type SynthChannelsDefinition = SynthStackDefinition;

type SynthMinimalConstructor = new (audioContext: AudioContext, ...p: any) => (AdmissibleSynthType);

export class SynthConstructorWrapper {
    constructor(
        public audioContext: AudioContext,
        public constructorFunction: SynthMinimalConstructor,
        public extraParams: unknown[] = [],
        public name: string
    ) {
    }
    create = () => {
        const instance = new this.constructorFunction(this.audioContext, ...this.extraParams);
        instance.name = this.name;
        return instance;
    }
}

const titleCase = <T extends (string | undefined)>(str: T) => {
    if (!str) return str;
    return str.replace(
        /\w\S*/g,
        function (txt) {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        }
    );
}

const sampleNameToUName = <T extends (string | undefined)>(name?: T) => {
    if (!name) return name;
    return titleCase(
        camelCaseToUName(name)
            .replace(/[^a-zA-Z0-9]/g, " ").replace(/ +/g, " ")
    ).trim();
}

const camelCaseToUName = <T extends (string | undefined)>(name: T) => {
    if (!name) return name;
    return titleCase(name.replace(/([A-Z])/g, " $1")).trim();
}

const getSynthConstructors = (
    audioContext: AudioContext,
    includeExclusives: boolean,
): SynthConstructorWrapper[] => {
    let returnArray = [] as SynthConstructorWrapper[];

    // Sorry for the contortionist code.
    // I need a constructor that can be instanced at runtime
    // and know the name beforehand.
    // Before making better code I would need to make the sampler's sample 
    // chooseable after instantiation.

    const addAvailableSynth = <T extends any[]>(
        constr: SynthMinimalConstructor,
        extraParams?: T,
        name?: string,
        isExclusive?: boolean,
        isOnlyLocal?: boolean,
    ) => {
        const epp = (extraParams || []) as T;
        if (isExclusive && !includeExclusives) return;
        if (isOnlyLocal && !isDev()) return;
        returnArray.push(
            new SynthConstructorWrapper(
                audioContext, constr, epp, name || camelCaseToUName(constr.name)
            )
        );
    }

    addAvailableSynth(PlaceholderSynth);

    sampleDefinitions.forEach((sampleDefinition) => {
        const ps = [
            sampleDefinition.samples,
            sampleDefinition.name,
            sampleDefinition.readme
        ];
        const sampleUname = sampleNameToUName(sampleDefinition.name);
        if (sampleDefinition.type === 'one shot') {
            addAvailableSynth(Sampler, ps, sampleUname + " Sampler", sampleDefinition.exclusive, sampleDefinition.onlyLocal);
        } else if (sampleDefinition.type === 'granular') {
            addAvailableSynth(GranularSampler, ps, "Granular " + sampleUname, sampleDefinition.exclusive, sampleDefinition.onlyLocal);
        } else {
            throw new Error("type not supported " + sampleDefinition.type)
        }

    });

    // impulseResponseSampleDefinitions.forEach(({
    //     name,
    //     path,
    //     collection,
    //     readme,
    // }) => {
    //     // When I create a sampler selector for bottom panel, I can pass the whole array so that 
    //     // the sample is chosen as param. Then I don't need to iterate over sampledefinitions
    //     const ps = [[
    //         { name, path, collection, readme }
    //     ]];
    //     addAvailableSynth(
    //         ConvolutionReverbEffect,
    //         ps, sampleNameToUName(name) + " Convolver", true, false
    //     );
    // });
    console.log("impulseResponseSampleDefinitions", impulseResponseSampleDefinitions);
    addAvailableSynth(
        ConvolutionReverbEffect,
        [impulseResponseSampleDefinitions], "Convolver", true, false
    );

    addAvailableSynth(KickSynth);
    addAvailableSynth(KarplusSynth);
    addAvailableSynth(SineCluster);
    addAvailableSynth(SineSynth);

    addAvailableSynth(RingModEffect);
    addAvailableSynth(AutoMaximizerEffect);

    if (isDev()) {
        // bc. unfinished
        addAvailableSynth(FmSynth, [], "(xp) Fm Synth", false, true);
        addAvailableSynth(FourierSynth, [], "(xp) Fourier Synth", false, true);
        addAvailableSynth(ThingyScoreFx, [], "(xp) Thingy Score Effect");
        addAvailableSynth(ExternalMidiSynth, [], "(xp) External Midi Synth");

        addAvailableSynth(PatcheableSynth, [], "(xp) Dyna synth", false, true);
    }
    console.log("available channels", returnArray.map(s => s.name));

    return returnArray;
}

export const useSynthStore = defineStore("synthesizers", () => {
    const layerStore = useLayerStore();
    const exclusives = useExclusiveContentsStore();
    const audioContextStore = useAudioContextStore();
    const masterEffectsStore = useMasterEffectsStore();

    const synthConstructorWrappers = ref<SynthConstructorWrapper[]>(getSynthConstructors(
        audioContextStore.audioContext,
        exclusives.enabled
    ));

    const channels = ref<SynthStack>(new SynthStack(audioContextStore.audioContext));
    const instancedSynths = ref<AdmissibleSynthType[]>([]);
    channels.value.output.connect(masterEffectsStore.myInput);

    const scheduleNote = (
        event: Note,
        eventStartAbsolute: number,
        eventDuration?: number,
    ) => {
        const synths = getLayerSynths(event.layer);
        if (!synths.length) return;
        const frequency = getFrequency(event);
        synths.forEach(synth => {
            if (synth instanceof PlaceholderSynth) return;
            if (eventDuration) {
                synth.scheduleStart(
                    frequency,
                    eventStartAbsolute,
                    event
                ).scheduleEnd(eventStartAbsolute + eventDuration);
            } else {
                synth.schedulePerc(
                    frequency,
                    eventStartAbsolute,
                    event
                );

            }
        })
    }
    const scheduleAutomation = (
        event: AutomationPoint,
        detinationTime: number,
        destinationParameter: SynthParam,
    ) => {
        if (!destinationParameter.animate) throw new Error("destination parameter is not animatable");
        destinationParameter.animate(event.value, detinationTime);
    }
    const releaseAll = () => channels.value.chains.forEach((chain) => chain.releaseAll());
    const instanceAudioModule = (audioModule: SynthConstructorWrapper) => {
        const newModule = audioModule.create();
        console.log("adding audio module", newModule.name, "count", instancedSynths.value.length);
        // to reduce traffic
        const enable = newModule.enable;
        if (enable) {
            if ('needsFetching' in newModule) {
                console.log("newModule needs fetching");
                if (exclusives.enabled) {
                    enable();
                } else {
                    setTimeout(() => {
                        enable();
                    }, 5000);
                }
            } else {
                enable();
            }
        }
        return newModule;
    }
    const findAudioModuleParamByName = (synth: AudioModule, name: string): SynthParam | undefined => {
        const exact = synth.params.find((param) => param.displayName === name);
        if (exact) return exact;
        const similar = synth.params.find((param) => param.displayName?.includes(name));
        if (similar) return similar;
        const abbrevName = abbreviate(name, 5);
        const abbreviated = synth.params.find((param) => {
            if (!param.displayName) return false;
            return abbreviate(param.displayName, 5).includes(abbrevName)
        });
        return abbreviated;
    }
    const applyChainDefinition = (chain: SynthChain, definition: SynthChainDefinition) => {
        console.log("applying chain definition", definition);
        definition.forEach((chainStep: SynthChainStepDefinition, i) => {
            if (Array.isArray(chainStep)) {
                // it's a stack
                const stackDef: SynthStackDefinition = chainStep;
                const newStack = new SynthStack(audioContextStore.audioContext);
                applyStackDefinition(newStack, stackDef);
                chain.addAudioModule(i, newStack);
            } else {
                // It's an audio module
                let synthConstructor = synthConstructorWrappers.value.find((s) => s.name === chainStep.type);
                if (!synthConstructor) {
                    const regex = new RegExp(chainStep.type.slice(0, 3));
                    const loosely = synthConstructorWrappers.value.find((s) => s.name.match(regex));
                    if (loosely) {
                        console.warn("synth named", chainStep.type, "not found, looking for similarly named: ", loosely?.name);
                        synthConstructor = loosely;
                    }
                }
                if (!synthConstructor) {
                    console.warn("synth not found", chainStep.type);
                    synthConstructor = synthConstructorWrappers.value[0];
                }
                const synth = instanceAudioModule(synthConstructor);
                chain.addAudioModule(i, synth);
                const paramsDef = chainStep.params;
                if (synth instanceof AudioModule && paramsDef) {
                    for (let paramDef of paramsDef) {
                        const synthParam = findAudioModuleParamByName(synth, paramDef.displayName || "");
                        if (!synthParam) {
                            console.warn("param not found", paramDef.displayName);
                            continue;
                        }
                        synthParam.value = paramDef.value;
                    }
                }
            }
        });
    }

    const applyStackDefinition = (stack: SynthStack, definition: SynthStackDefinition) => {
        definition.forEach((chainDef: SynthChainDefinition) => {
            const newChain = stack.addChain();
            applyChainDefinition(newChain, chainDef);
        });
    }

    const applyChannelsDefinition = (inChannels: SynthChannelsDefinition, addToCurrent = false) => {
        console.log("applying channels definition", inChannels);
        if (!addToCurrent) {
            channels.value.empty();
        }
        inChannels.forEach((chainDef) => {
            console.log("loading channel chain", chainDef);
            const newChain = channels.value.addChain();
            applyChainDefinition(newChain, chainDef);
        });
    }

    const getDefinitionForAudioModule = (synth: AudioModule): AudioModuleDefinition => {
        let params = synth.params.filter((param: SynthParam) => {
            return param.exportable;
        }).map((param: SynthParam) => {
            const ret = {
                value: param.value,
            } as SynthParamStored
            if (param.displayName) {
                ret.displayName = param.displayName;
            }
            return ret;
        }) as SynthParamStored[]
        return {
            type: synth.name || "unknown",
            params
        }
    }

    const getDefinitionForChain = (fromChain: SynthChain): SynthChainDefinition => {
        return fromChain.chain.map((step) => {
            if (step instanceof SynthStack) {
                return getDefinitionForStack(step);
            }
            if (step.patcheableType === PatcheableType.AudioModule) {
                const audioModule = step as AudioModule;
                return getDefinitionForAudioModule(audioModule);
            }
            console.error("no method to get definition for ", step);
            return [];
        })
    }

    const getDefinitionForStack = (stack: SynthStack): SynthStackDefinition => {
        return stack.chains.map((chain) => {
            return getDefinitionForChain(chain);
        });
    }

    const getCurrentChannelsDefinition = (): SynthChannelsDefinition => {
        return getDefinitionForStack(channels.value);
    }

    const synthParamToAccessorString = (param?: SynthParam) => {
        if (!param) return undefined;
        if (typeof param === 'string') throw new Error("param is string");
        const synthWithParam = instancedSynths.value.find((synth) => synth.params.includes(param));
        if (!synthWithParam) throw new Error("synth with param not found");
        const synthName = synthWithParam.name;
        const paramName = param.displayName;
        return `${synthName}.${paramName}`;
    }

    const accessorStringToSynthParam = (accessorString?: string): SynthParam | undefined => {
        console.warn("accessor string to synth param, needs updating to target channel, represent multi-instance receivesNotes", accessorString);
        if (!accessorString) return undefined;
        const [synthName, paramName] = accessorString.split(".");
        const synth = instancedSynths.value.find((s) => s.name === synthName);
        if (!synth) {
            console.warn("synth named ", synthName, "not found", synthName);
            return undefined;
        }
        const param = synth.params.find((p) => p.displayName === paramName);
        if (!param) {
            console.warn("param not found", paramName);
            return undefined;
        }
        console.log("found automated param ", param);
        return param;
    }


    /**
     * resolve assoc of
     * layer -> channels -> synth
     * falls back to default channel synth 0
     * 
     * could be memoized (it's called on every single trigger evt)
     */
    const getLayerSynths = (layerNo: number): ReceivesNotes[] => {
        const channelNo = layerStore.layers[layerNo]?.channelSlot as number | undefined;
        const channelIfExists = channels.value.chains[channelNo || 0] as SynthChain | undefined;
        if (!channelIfExists) {
            return channels.value.chains[0]?.getNoteReceivers() || [];
        }
        return channelIfExists.getNoteReceivers();
    }

    channels.value.addChain().name = "Default Channel";

    return {
        synthConstructorWrappers,
        instancedSynths,
        channels,
        getCurrentChannelsDefinition,
        scheduleNote,
        scheduleAutomation,
        releaseAll,
        getLayerSynths,
        applyChannelsDefinition,
        instanceAudioModule,
        synthParamToAccessorString,
        accessorStringToSynthParam,
        testBeep: async () => {
            !isTauri() && console.warn("beep only works in tauri");
            const { invoke } = await tauriObject();
            await invoke("trigger", {
                frequency: 80 + 440 * Math.pow(2, Math.random()),
                amplitude: 1,
            });
            console.log("beeped");
        }

    }
});